
/*
'===============================================================================
'  Generated From - CSharp_dOOdads_BusinessEntity.vbgen
' 
'  ** IMPORTANT  ** 
'  How to Generate your stored procedures:
' 
'  SQL        = SQL_StoredProcs.vbgen
'  ACCESS     = Access_StoredProcs.vbgen
'  ORACLE     = Oracle_StoredProcs.vbgen
'  FIREBIRD   = FirebirdStoredProcs.vbgen
'  POSTGRESQL = PostgreSQL_StoredProcs.vbgen
'
'  The supporting base class SqlClientEntity is in the Architecture directory in "dOOdads".
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easilly done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by MyGeneration Version # (1.3.0.3)

using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;
using System.Collections.Specialized;

using MyGeneration.dOOdads;

namespace gp.ModeloDeDatos
{
	public abstract class _TX00201 : SqlClientEntity
	{
		public _TX00201()
		{
			this.QuerySource = "TX00201";
			this.MappingName = "TX00201";

		}	

		//=================================================================
		//  public Overrides void AddNew()
		//=================================================================
		//
		//=================================================================
		public override void AddNew()
		{
			base.AddNew();
			
		}
		
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}
		
		//=================================================================
		//  	public Function LoadAll() As Boolean
		//=================================================================
		//  Loads all of the records in the database, and sets the currentRow to the first row
		//=================================================================
		public bool LoadAll() 
		{
			ListDictionary parameters = null;
			
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TX00201LoadAll]", parameters);
		}
	
		//=================================================================
		// public Overridable Function LoadByPrimaryKey()  As Boolean
		//=================================================================
		//  Loads a single row of via the primary key
		//=================================================================
		public virtual bool LoadByPrimaryKey(string TAXDTLID)
		{
			ListDictionary parameters = new ListDictionary();
			parameters.Add(Parameters.TAXDTLID, TAXDTLID);

		
			return base.LoadFromSql("[" + this.SchemaStoredProcedure + "proc_TX00201LoadByPrimaryKey]", parameters);
		}
		
		#region Parameters
		protected class Parameters
		{
			
			public static SqlParameter TAXDTLID
			{
				get
				{
					return new SqlParameter("@TAXDTLID", SqlDbType.Char, 15);
				}
			}
			
			public static SqlParameter TXDTLDSC
			{
				get
				{
					return new SqlParameter("@TXDTLDSC", SqlDbType.Char, 31);
				}
			}
			
			public static SqlParameter TXDTLTYP
			{
				get
				{
					return new SqlParameter("@TXDTLTYP", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter ACTINDX
			{
				get
				{
					return new SqlParameter("@ACTINDX", SqlDbType.Int, 0);
				}
			}
			
			public static SqlParameter TXIDNMBR
			{
				get
				{
					return new SqlParameter("@TXIDNMBR", SqlDbType.Char, 11);
				}
			}
			
			public static SqlParameter TXDTLBSE
			{
				get
				{
					return new SqlParameter("@TXDTLBSE", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter TXDTLPCT
			{
				get
				{
					return new SqlParameter("@TXDTLPCT", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter TXDTLAMT
			{
				get
				{
					return new SqlParameter("@TXDTLAMT", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter TDTLRNDG
			{
				get
				{
					return new SqlParameter("@TDTLRNDG", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter TXDBODTL
			{
				get
				{
					return new SqlParameter("@TXDBODTL", SqlDbType.Char, 15);
				}
			}
			
			public static SqlParameter TDTABMIN
			{
				get
				{
					return new SqlParameter("@TDTABMIN", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter TDTABMAX
			{
				get
				{
					return new SqlParameter("@TDTABMAX", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter TDTAXMIN
			{
				get
				{
					return new SqlParameter("@TDTAXMIN", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter TDTAXMAX
			{
				get
				{
					return new SqlParameter("@TDTAXMAX", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter TDRNGTYP
			{
				get
				{
					return new SqlParameter("@TDRNGTYP", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter TXDTQUAL
			{
				get
				{
					return new SqlParameter("@TXDTQUAL", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter TDTAXTAX
			{
				get
				{
					return new SqlParameter("@TDTAXTAX", SqlDbType.TinyInt, 0);
				}
			}
			
			public static SqlParameter TXDTLPDC
			{
				get
				{
					return new SqlParameter("@TXDTLPDC", SqlDbType.TinyInt, 0);
				}
			}
			
			public static SqlParameter TXDTLPCH
			{
				get
				{
					return new SqlParameter("@TXDTLPCH", SqlDbType.Char, 1);
				}
			}
			
			public static SqlParameter TXDXDISC
			{
				get
				{
					return new SqlParameter("@TXDXDISC", SqlDbType.TinyInt, 0);
				}
			}
			
			public static SqlParameter CMNYTXID
			{
				get
				{
					return new SqlParameter("@CMNYTXID", SqlDbType.Char, 15);
				}
			}
			
			public static SqlParameter NOTEINDX
			{
				get
				{
					return new SqlParameter("@NOTEINDX", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter NAME
			{
				get
				{
					return new SqlParameter("@NAME", SqlDbType.Char, 31);
				}
			}
			
			public static SqlParameter CNTCPRSN
			{
				get
				{
					return new SqlParameter("@CNTCPRSN", SqlDbType.Char, 61);
				}
			}
			
			public static SqlParameter ADDRESS1
			{
				get
				{
					return new SqlParameter("@ADDRESS1", SqlDbType.Char, 61);
				}
			}
			
			public static SqlParameter ADDRESS2
			{
				get
				{
					return new SqlParameter("@ADDRESS2", SqlDbType.Char, 61);
				}
			}
			
			public static SqlParameter ADDRESS3
			{
				get
				{
					return new SqlParameter("@ADDRESS3", SqlDbType.Char, 61);
				}
			}
			
			public static SqlParameter CITY
			{
				get
				{
					return new SqlParameter("@CITY", SqlDbType.Char, 35);
				}
			}
			
			public static SqlParameter STATE
			{
				get
				{
					return new SqlParameter("@STATE", SqlDbType.Char, 29);
				}
			}
			
			public static SqlParameter ZIPCODE
			{
				get
				{
					return new SqlParameter("@ZIPCODE", SqlDbType.Char, 11);
				}
			}
			
			public static SqlParameter COUNTRY
			{
				get
				{
					return new SqlParameter("@COUNTRY", SqlDbType.Char, 61);
				}
			}
			
			public static SqlParameter PHONE1
			{
				get
				{
					return new SqlParameter("@PHONE1", SqlDbType.Char, 21);
				}
			}
			
			public static SqlParameter PHONE2
			{
				get
				{
					return new SqlParameter("@PHONE2", SqlDbType.Char, 21);
				}
			}
			
			public static SqlParameter PHONE3
			{
				get
				{
					return new SqlParameter("@PHONE3", SqlDbType.Char, 21);
				}
			}
			
			public static SqlParameter FAX
			{
				get
				{
					return new SqlParameter("@FAX", SqlDbType.Char, 21);
				}
			}
			
			public static SqlParameter TXUSRDF1
			{
				get
				{
					return new SqlParameter("@TXUSRDF1", SqlDbType.Char, 21);
				}
			}
			
			public static SqlParameter TXUSRDF2
			{
				get
				{
					return new SqlParameter("@TXUSRDF2", SqlDbType.Char, 21);
				}
			}
			
			public static SqlParameter VATREGTX
			{
				get
				{
					return new SqlParameter("@VATREGTX", SqlDbType.TinyInt, 0);
				}
			}
			
			public static SqlParameter TaxInvReqd
			{
				get
				{
					return new SqlParameter("@TaxInvReqd", SqlDbType.TinyInt, 0);
				}
			}
			
			public static SqlParameter TaxPostToAcct
			{
				get
				{
					return new SqlParameter("@TaxPostToAcct", SqlDbType.SmallInt, 0);
				}
			}
			
			public static SqlParameter TaxBoxes
			{
				get
				{
					return new SqlParameter("@TaxBoxes", SqlDbType.Binary, 4);
				}
			}
			
			public static SqlParameter IGNRGRSSAMNT
			{
				get
				{
					return new SqlParameter("@IGNRGRSSAMNT", SqlDbType.TinyInt, 0);
				}
			}
			
			public static SqlParameter TDTABPCT
			{
				get
				{
					return new SqlParameter("@TDTABPCT", SqlDbType.Decimal, 0);
				}
			}
			
			public static SqlParameter DEX_ROW_ID
			{
				get
				{
					return new SqlParameter("@DEX_ROW_ID", SqlDbType.Int, 0);
				}
			}
			
		}
		#endregion		
	
		#region ColumnNames
		public class ColumnNames
		{  
            public const string TAXDTLID = "TAXDTLID";
            public const string TXDTLDSC = "TXDTLDSC";
            public const string TXDTLTYP = "TXDTLTYP";
            public const string ACTINDX = "ACTINDX";
            public const string TXIDNMBR = "TXIDNMBR";
            public const string TXDTLBSE = "TXDTLBSE";
            public const string TXDTLPCT = "TXDTLPCT";
            public const string TXDTLAMT = "TXDTLAMT";
            public const string TDTLRNDG = "TDTLRNDG";
            public const string TXDBODTL = "TXDBODTL";
            public const string TDTABMIN = "TDTABMIN";
            public const string TDTABMAX = "TDTABMAX";
            public const string TDTAXMIN = "TDTAXMIN";
            public const string TDTAXMAX = "TDTAXMAX";
            public const string TDRNGTYP = "TDRNGTYP";
            public const string TXDTQUAL = "TXDTQUAL";
            public const string TDTAXTAX = "TDTAXTAX";
            public const string TXDTLPDC = "TXDTLPDC";
            public const string TXDTLPCH = "TXDTLPCH";
            public const string TXDXDISC = "TXDXDISC";
            public const string CMNYTXID = "CMNYTXID";
            public const string NOTEINDX = "NOTEINDX";
            public const string NAME = "NAME";
            public const string CNTCPRSN = "CNTCPRSN";
            public const string ADDRESS1 = "ADDRESS1";
            public const string ADDRESS2 = "ADDRESS2";
            public const string ADDRESS3 = "ADDRESS3";
            public const string CITY = "CITY";
            public const string STATE = "STATE";
            public const string ZIPCODE = "ZIPCODE";
            public const string COUNTRY = "COUNTRY";
            public const string PHONE1 = "PHONE1";
            public const string PHONE2 = "PHONE2";
            public const string PHONE3 = "PHONE3";
            public const string FAX = "FAX";
            public const string TXUSRDF1 = "TXUSRDF1";
            public const string TXUSRDF2 = "TXUSRDF2";
            public const string VATREGTX = "VATREGTX";
            public const string TaxInvReqd = "TaxInvReqd";
            public const string TaxPostToAcct = "TaxPostToAcct";
            public const string TaxBoxes = "TaxBoxes";
            public const string IGNRGRSSAMNT = "IGNRGRSSAMNT";
            public const string TDTABPCT = "TDTABPCT";
            public const string DEX_ROW_ID = "DEX_ROW_ID";

			static public string ToPropertyName(string columnName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TAXDTLID] = _TX00201.PropertyNames.TAXDTLID;
					ht[TXDTLDSC] = _TX00201.PropertyNames.TXDTLDSC;
					ht[TXDTLTYP] = _TX00201.PropertyNames.TXDTLTYP;
					ht[ACTINDX] = _TX00201.PropertyNames.ACTINDX;
					ht[TXIDNMBR] = _TX00201.PropertyNames.TXIDNMBR;
					ht[TXDTLBSE] = _TX00201.PropertyNames.TXDTLBSE;
					ht[TXDTLPCT] = _TX00201.PropertyNames.TXDTLPCT;
					ht[TXDTLAMT] = _TX00201.PropertyNames.TXDTLAMT;
					ht[TDTLRNDG] = _TX00201.PropertyNames.TDTLRNDG;
					ht[TXDBODTL] = _TX00201.PropertyNames.TXDBODTL;
					ht[TDTABMIN] = _TX00201.PropertyNames.TDTABMIN;
					ht[TDTABMAX] = _TX00201.PropertyNames.TDTABMAX;
					ht[TDTAXMIN] = _TX00201.PropertyNames.TDTAXMIN;
					ht[TDTAXMAX] = _TX00201.PropertyNames.TDTAXMAX;
					ht[TDRNGTYP] = _TX00201.PropertyNames.TDRNGTYP;
					ht[TXDTQUAL] = _TX00201.PropertyNames.TXDTQUAL;
					ht[TDTAXTAX] = _TX00201.PropertyNames.TDTAXTAX;
					ht[TXDTLPDC] = _TX00201.PropertyNames.TXDTLPDC;
					ht[TXDTLPCH] = _TX00201.PropertyNames.TXDTLPCH;
					ht[TXDXDISC] = _TX00201.PropertyNames.TXDXDISC;
					ht[CMNYTXID] = _TX00201.PropertyNames.CMNYTXID;
					ht[NOTEINDX] = _TX00201.PropertyNames.NOTEINDX;
					ht[NAME] = _TX00201.PropertyNames.NAME;
					ht[CNTCPRSN] = _TX00201.PropertyNames.CNTCPRSN;
					ht[ADDRESS1] = _TX00201.PropertyNames.ADDRESS1;
					ht[ADDRESS2] = _TX00201.PropertyNames.ADDRESS2;
					ht[ADDRESS3] = _TX00201.PropertyNames.ADDRESS3;
					ht[CITY] = _TX00201.PropertyNames.CITY;
					ht[STATE] = _TX00201.PropertyNames.STATE;
					ht[ZIPCODE] = _TX00201.PropertyNames.ZIPCODE;
					ht[COUNTRY] = _TX00201.PropertyNames.COUNTRY;
					ht[PHONE1] = _TX00201.PropertyNames.PHONE1;
					ht[PHONE2] = _TX00201.PropertyNames.PHONE2;
					ht[PHONE3] = _TX00201.PropertyNames.PHONE3;
					ht[FAX] = _TX00201.PropertyNames.FAX;
					ht[TXUSRDF1] = _TX00201.PropertyNames.TXUSRDF1;
					ht[TXUSRDF2] = _TX00201.PropertyNames.TXUSRDF2;
					ht[VATREGTX] = _TX00201.PropertyNames.VATREGTX;
					ht[TaxInvReqd] = _TX00201.PropertyNames.TaxInvReqd;
					ht[TaxPostToAcct] = _TX00201.PropertyNames.TaxPostToAcct;
					ht[TaxBoxes] = _TX00201.PropertyNames.TaxBoxes;
					ht[IGNRGRSSAMNT] = _TX00201.PropertyNames.IGNRGRSSAMNT;
					ht[TDTABPCT] = _TX00201.PropertyNames.TDTABPCT;
					ht[DEX_ROW_ID] = _TX00201.PropertyNames.DEX_ROW_ID;

				}
				return (string)ht[columnName];
			}

			static private Hashtable ht = null;			 
		}
		#endregion
		
		#region PropertyNames
		public class PropertyNames
		{  
            public const string TAXDTLID = "TAXDTLID";
            public const string TXDTLDSC = "TXDTLDSC";
            public const string TXDTLTYP = "TXDTLTYP";
            public const string ACTINDX = "ACTINDX";
            public const string TXIDNMBR = "TXIDNMBR";
            public const string TXDTLBSE = "TXDTLBSE";
            public const string TXDTLPCT = "TXDTLPCT";
            public const string TXDTLAMT = "TXDTLAMT";
            public const string TDTLRNDG = "TDTLRNDG";
            public const string TXDBODTL = "TXDBODTL";
            public const string TDTABMIN = "TDTABMIN";
            public const string TDTABMAX = "TDTABMAX";
            public const string TDTAXMIN = "TDTAXMIN";
            public const string TDTAXMAX = "TDTAXMAX";
            public const string TDRNGTYP = "TDRNGTYP";
            public const string TXDTQUAL = "TXDTQUAL";
            public const string TDTAXTAX = "TDTAXTAX";
            public const string TXDTLPDC = "TXDTLPDC";
            public const string TXDTLPCH = "TXDTLPCH";
            public const string TXDXDISC = "TXDXDISC";
            public const string CMNYTXID = "CMNYTXID";
            public const string NOTEINDX = "NOTEINDX";
            public const string NAME = "NAME";
            public const string CNTCPRSN = "CNTCPRSN";
            public const string ADDRESS1 = "ADDRESS1";
            public const string ADDRESS2 = "ADDRESS2";
            public const string ADDRESS3 = "ADDRESS3";
            public const string CITY = "CITY";
            public const string STATE = "STATE";
            public const string ZIPCODE = "ZIPCODE";
            public const string COUNTRY = "COUNTRY";
            public const string PHONE1 = "PHONE1";
            public const string PHONE2 = "PHONE2";
            public const string PHONE3 = "PHONE3";
            public const string FAX = "FAX";
            public const string TXUSRDF1 = "TXUSRDF1";
            public const string TXUSRDF2 = "TXUSRDF2";
            public const string VATREGTX = "VATREGTX";
            public const string TaxInvReqd = "TaxInvReqd";
            public const string TaxPostToAcct = "TaxPostToAcct";
            public const string TaxBoxes = "TaxBoxes";
            public const string IGNRGRSSAMNT = "IGNRGRSSAMNT";
            public const string TDTABPCT = "TDTABPCT";
            public const string DEX_ROW_ID = "DEX_ROW_ID";

			static public string ToColumnName(string propertyName)
			{
				if(ht == null)
				{
					ht = new Hashtable();
					
					ht[TAXDTLID] = _TX00201.ColumnNames.TAXDTLID;
					ht[TXDTLDSC] = _TX00201.ColumnNames.TXDTLDSC;
					ht[TXDTLTYP] = _TX00201.ColumnNames.TXDTLTYP;
					ht[ACTINDX] = _TX00201.ColumnNames.ACTINDX;
					ht[TXIDNMBR] = _TX00201.ColumnNames.TXIDNMBR;
					ht[TXDTLBSE] = _TX00201.ColumnNames.TXDTLBSE;
					ht[TXDTLPCT] = _TX00201.ColumnNames.TXDTLPCT;
					ht[TXDTLAMT] = _TX00201.ColumnNames.TXDTLAMT;
					ht[TDTLRNDG] = _TX00201.ColumnNames.TDTLRNDG;
					ht[TXDBODTL] = _TX00201.ColumnNames.TXDBODTL;
					ht[TDTABMIN] = _TX00201.ColumnNames.TDTABMIN;
					ht[TDTABMAX] = _TX00201.ColumnNames.TDTABMAX;
					ht[TDTAXMIN] = _TX00201.ColumnNames.TDTAXMIN;
					ht[TDTAXMAX] = _TX00201.ColumnNames.TDTAXMAX;
					ht[TDRNGTYP] = _TX00201.ColumnNames.TDRNGTYP;
					ht[TXDTQUAL] = _TX00201.ColumnNames.TXDTQUAL;
					ht[TDTAXTAX] = _TX00201.ColumnNames.TDTAXTAX;
					ht[TXDTLPDC] = _TX00201.ColumnNames.TXDTLPDC;
					ht[TXDTLPCH] = _TX00201.ColumnNames.TXDTLPCH;
					ht[TXDXDISC] = _TX00201.ColumnNames.TXDXDISC;
					ht[CMNYTXID] = _TX00201.ColumnNames.CMNYTXID;
					ht[NOTEINDX] = _TX00201.ColumnNames.NOTEINDX;
					ht[NAME] = _TX00201.ColumnNames.NAME;
					ht[CNTCPRSN] = _TX00201.ColumnNames.CNTCPRSN;
					ht[ADDRESS1] = _TX00201.ColumnNames.ADDRESS1;
					ht[ADDRESS2] = _TX00201.ColumnNames.ADDRESS2;
					ht[ADDRESS3] = _TX00201.ColumnNames.ADDRESS3;
					ht[CITY] = _TX00201.ColumnNames.CITY;
					ht[STATE] = _TX00201.ColumnNames.STATE;
					ht[ZIPCODE] = _TX00201.ColumnNames.ZIPCODE;
					ht[COUNTRY] = _TX00201.ColumnNames.COUNTRY;
					ht[PHONE1] = _TX00201.ColumnNames.PHONE1;
					ht[PHONE2] = _TX00201.ColumnNames.PHONE2;
					ht[PHONE3] = _TX00201.ColumnNames.PHONE3;
					ht[FAX] = _TX00201.ColumnNames.FAX;
					ht[TXUSRDF1] = _TX00201.ColumnNames.TXUSRDF1;
					ht[TXUSRDF2] = _TX00201.ColumnNames.TXUSRDF2;
					ht[VATREGTX] = _TX00201.ColumnNames.VATREGTX;
					ht[TaxInvReqd] = _TX00201.ColumnNames.TaxInvReqd;
					ht[TaxPostToAcct] = _TX00201.ColumnNames.TaxPostToAcct;
					ht[TaxBoxes] = _TX00201.ColumnNames.TaxBoxes;
					ht[IGNRGRSSAMNT] = _TX00201.ColumnNames.IGNRGRSSAMNT;
					ht[TDTABPCT] = _TX00201.ColumnNames.TDTABPCT;
					ht[DEX_ROW_ID] = _TX00201.ColumnNames.DEX_ROW_ID;

				}
				return (string)ht[propertyName];
			}

			static private Hashtable ht = null;			 
		}			 
		#endregion	

		#region StringPropertyNames
		public class StringPropertyNames
		{  
            public const string TAXDTLID = "s_TAXDTLID";
            public const string TXDTLDSC = "s_TXDTLDSC";
            public const string TXDTLTYP = "s_TXDTLTYP";
            public const string ACTINDX = "s_ACTINDX";
            public const string TXIDNMBR = "s_TXIDNMBR";
            public const string TXDTLBSE = "s_TXDTLBSE";
            public const string TXDTLPCT = "s_TXDTLPCT";
            public const string TXDTLAMT = "s_TXDTLAMT";
            public const string TDTLRNDG = "s_TDTLRNDG";
            public const string TXDBODTL = "s_TXDBODTL";
            public const string TDTABMIN = "s_TDTABMIN";
            public const string TDTABMAX = "s_TDTABMAX";
            public const string TDTAXMIN = "s_TDTAXMIN";
            public const string TDTAXMAX = "s_TDTAXMAX";
            public const string TDRNGTYP = "s_TDRNGTYP";
            public const string TXDTQUAL = "s_TXDTQUAL";
            public const string TDTAXTAX = "s_TDTAXTAX";
            public const string TXDTLPDC = "s_TXDTLPDC";
            public const string TXDTLPCH = "s_TXDTLPCH";
            public const string TXDXDISC = "s_TXDXDISC";
            public const string CMNYTXID = "s_CMNYTXID";
            public const string NOTEINDX = "s_NOTEINDX";
            public const string NAME = "s_NAME";
            public const string CNTCPRSN = "s_CNTCPRSN";
            public const string ADDRESS1 = "s_ADDRESS1";
            public const string ADDRESS2 = "s_ADDRESS2";
            public const string ADDRESS3 = "s_ADDRESS3";
            public const string CITY = "s_CITY";
            public const string STATE = "s_STATE";
            public const string ZIPCODE = "s_ZIPCODE";
            public const string COUNTRY = "s_COUNTRY";
            public const string PHONE1 = "s_PHONE1";
            public const string PHONE2 = "s_PHONE2";
            public const string PHONE3 = "s_PHONE3";
            public const string FAX = "s_FAX";
            public const string TXUSRDF1 = "s_TXUSRDF1";
            public const string TXUSRDF2 = "s_TXUSRDF2";
            public const string VATREGTX = "s_VATREGTX";
            public const string TaxInvReqd = "s_TaxInvReqd";
            public const string TaxPostToAcct = "s_TaxPostToAcct";
            public const string TaxBoxes = "s_TaxBoxes";
            public const string IGNRGRSSAMNT = "s_IGNRGRSSAMNT";
            public const string TDTABPCT = "s_TDTABPCT";
            public const string DEX_ROW_ID = "s_DEX_ROW_ID";

		}
		#endregion		
		
		#region Properties
	
		public virtual string TAXDTLID
	    {
			get
	        {
				return base.Getstring(ColumnNames.TAXDTLID);
			}
			set
	        {
				base.Setstring(ColumnNames.TAXDTLID, value);
			}
		}

		public virtual string TXDTLDSC
	    {
			get
	        {
				return base.Getstring(ColumnNames.TXDTLDSC);
			}
			set
	        {
				base.Setstring(ColumnNames.TXDTLDSC, value);
			}
		}

		public virtual short TXDTLTYP
	    {
			get
	        {
				return base.Getshort(ColumnNames.TXDTLTYP);
			}
			set
	        {
				base.Setshort(ColumnNames.TXDTLTYP, value);
			}
		}

		public virtual int ACTINDX
	    {
			get
	        {
				return base.Getint(ColumnNames.ACTINDX);
			}
			set
	        {
				base.Setint(ColumnNames.ACTINDX, value);
			}
		}

		public virtual string TXIDNMBR
	    {
			get
	        {
				return base.Getstring(ColumnNames.TXIDNMBR);
			}
			set
	        {
				base.Setstring(ColumnNames.TXIDNMBR, value);
			}
		}

		public virtual short TXDTLBSE
	    {
			get
	        {
				return base.Getshort(ColumnNames.TXDTLBSE);
			}
			set
	        {
				base.Setshort(ColumnNames.TXDTLBSE, value);
			}
		}

		public virtual decimal TXDTLPCT
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.TXDTLPCT);
			}
			set
	        {
				base.Setdecimal(ColumnNames.TXDTLPCT, value);
			}
		}

		public virtual decimal TXDTLAMT
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.TXDTLAMT);
			}
			set
	        {
				base.Setdecimal(ColumnNames.TXDTLAMT, value);
			}
		}

		public virtual short TDTLRNDG
	    {
			get
	        {
				return base.Getshort(ColumnNames.TDTLRNDG);
			}
			set
	        {
				base.Setshort(ColumnNames.TDTLRNDG, value);
			}
		}

		public virtual string TXDBODTL
	    {
			get
	        {
				return base.Getstring(ColumnNames.TXDBODTL);
			}
			set
	        {
				base.Setstring(ColumnNames.TXDBODTL, value);
			}
		}

		public virtual decimal TDTABMIN
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.TDTABMIN);
			}
			set
	        {
				base.Setdecimal(ColumnNames.TDTABMIN, value);
			}
		}

		public virtual decimal TDTABMAX
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.TDTABMAX);
			}
			set
	        {
				base.Setdecimal(ColumnNames.TDTABMAX, value);
			}
		}

		public virtual decimal TDTAXMIN
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.TDTAXMIN);
			}
			set
	        {
				base.Setdecimal(ColumnNames.TDTAXMIN, value);
			}
		}

		public virtual decimal TDTAXMAX
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.TDTAXMAX);
			}
			set
	        {
				base.Setdecimal(ColumnNames.TDTAXMAX, value);
			}
		}

		public virtual short TDRNGTYP
	    {
			get
	        {
				return base.Getshort(ColumnNames.TDRNGTYP);
			}
			set
	        {
				base.Setshort(ColumnNames.TDRNGTYP, value);
			}
		}

		public virtual short TXDTQUAL
	    {
			get
	        {
				return base.Getshort(ColumnNames.TXDTQUAL);
			}
			set
	        {
				base.Setshort(ColumnNames.TXDTQUAL, value);
			}
		}

		public virtual byte TDTAXTAX
	    {
			get
	        {
				return base.Getbyte(ColumnNames.TDTAXTAX);
			}
			set
	        {
				base.Setbyte(ColumnNames.TDTAXTAX, value);
			}
		}

		public virtual byte TXDTLPDC
	    {
			get
	        {
				return base.Getbyte(ColumnNames.TXDTLPDC);
			}
			set
	        {
				base.Setbyte(ColumnNames.TXDTLPDC, value);
			}
		}

		public virtual string TXDTLPCH
	    {
			get
	        {
				return base.Getstring(ColumnNames.TXDTLPCH);
			}
			set
	        {
				base.Setstring(ColumnNames.TXDTLPCH, value);
			}
		}

		public virtual byte TXDXDISC
	    {
			get
	        {
				return base.Getbyte(ColumnNames.TXDXDISC);
			}
			set
	        {
				base.Setbyte(ColumnNames.TXDXDISC, value);
			}
		}

		public virtual string CMNYTXID
	    {
			get
	        {
				return base.Getstring(ColumnNames.CMNYTXID);
			}
			set
	        {
				base.Setstring(ColumnNames.CMNYTXID, value);
			}
		}

		public virtual decimal NOTEINDX
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.NOTEINDX);
			}
			set
	        {
				base.Setdecimal(ColumnNames.NOTEINDX, value);
			}
		}

		public virtual string NAME
	    {
			get
	        {
				return base.Getstring(ColumnNames.NAME);
			}
			set
	        {
				base.Setstring(ColumnNames.NAME, value);
			}
		}

		public virtual string CNTCPRSN
	    {
			get
	        {
				return base.Getstring(ColumnNames.CNTCPRSN);
			}
			set
	        {
				base.Setstring(ColumnNames.CNTCPRSN, value);
			}
		}

		public virtual string ADDRESS1
	    {
			get
	        {
				return base.Getstring(ColumnNames.ADDRESS1);
			}
			set
	        {
				base.Setstring(ColumnNames.ADDRESS1, value);
			}
		}

		public virtual string ADDRESS2
	    {
			get
	        {
				return base.Getstring(ColumnNames.ADDRESS2);
			}
			set
	        {
				base.Setstring(ColumnNames.ADDRESS2, value);
			}
		}

		public virtual string ADDRESS3
	    {
			get
	        {
				return base.Getstring(ColumnNames.ADDRESS3);
			}
			set
	        {
				base.Setstring(ColumnNames.ADDRESS3, value);
			}
		}

		public virtual string CITY
	    {
			get
	        {
				return base.Getstring(ColumnNames.CITY);
			}
			set
	        {
				base.Setstring(ColumnNames.CITY, value);
			}
		}

		public virtual string STATE
	    {
			get
	        {
				return base.Getstring(ColumnNames.STATE);
			}
			set
	        {
				base.Setstring(ColumnNames.STATE, value);
			}
		}

		public virtual string ZIPCODE
	    {
			get
	        {
				return base.Getstring(ColumnNames.ZIPCODE);
			}
			set
	        {
				base.Setstring(ColumnNames.ZIPCODE, value);
			}
		}

		public virtual string COUNTRY
	    {
			get
	        {
				return base.Getstring(ColumnNames.COUNTRY);
			}
			set
	        {
				base.Setstring(ColumnNames.COUNTRY, value);
			}
		}

		public virtual string PHONE1
	    {
			get
	        {
				return base.Getstring(ColumnNames.PHONE1);
			}
			set
	        {
				base.Setstring(ColumnNames.PHONE1, value);
			}
		}

		public virtual string PHONE2
	    {
			get
	        {
				return base.Getstring(ColumnNames.PHONE2);
			}
			set
	        {
				base.Setstring(ColumnNames.PHONE2, value);
			}
		}

		public virtual string PHONE3
	    {
			get
	        {
				return base.Getstring(ColumnNames.PHONE3);
			}
			set
	        {
				base.Setstring(ColumnNames.PHONE3, value);
			}
		}

		public virtual string FAX
	    {
			get
	        {
				return base.Getstring(ColumnNames.FAX);
			}
			set
	        {
				base.Setstring(ColumnNames.FAX, value);
			}
		}

		public virtual string TXUSRDF1
	    {
			get
	        {
				return base.Getstring(ColumnNames.TXUSRDF1);
			}
			set
	        {
				base.Setstring(ColumnNames.TXUSRDF1, value);
			}
		}

		public virtual string TXUSRDF2
	    {
			get
	        {
				return base.Getstring(ColumnNames.TXUSRDF2);
			}
			set
	        {
				base.Setstring(ColumnNames.TXUSRDF2, value);
			}
		}

		public virtual byte VATREGTX
	    {
			get
	        {
				return base.Getbyte(ColumnNames.VATREGTX);
			}
			set
	        {
				base.Setbyte(ColumnNames.VATREGTX, value);
			}
		}

		public virtual byte TaxInvReqd
	    {
			get
	        {
				return base.Getbyte(ColumnNames.TaxInvReqd);
			}
			set
	        {
				base.Setbyte(ColumnNames.TaxInvReqd, value);
			}
		}

		public virtual short TaxPostToAcct
	    {
			get
	        {
				return base.Getshort(ColumnNames.TaxPostToAcct);
			}
			set
	        {
				base.Setshort(ColumnNames.TaxPostToAcct, value);
			}
		}

		public virtual object TaxBoxes
	    {
			get
	        {
				return base.Getobject(ColumnNames.TaxBoxes);
			}
			set
	        {
				base.Setobject(ColumnNames.TaxBoxes, value);
			}
		}

		public virtual byte IGNRGRSSAMNT
	    {
			get
	        {
				return base.Getbyte(ColumnNames.IGNRGRSSAMNT);
			}
			set
	        {
				base.Setbyte(ColumnNames.IGNRGRSSAMNT, value);
			}
		}

		public virtual decimal TDTABPCT
	    {
			get
	        {
				return base.Getdecimal(ColumnNames.TDTABPCT);
			}
			set
	        {
				base.Setdecimal(ColumnNames.TDTABPCT, value);
			}
		}

		public virtual int DEX_ROW_ID
	    {
			get
	        {
				return base.Getint(ColumnNames.DEX_ROW_ID);
			}
			set
	        {
				base.Setint(ColumnNames.DEX_ROW_ID, value);
			}
		}


		#endregion
		
		#region String Properties
	
		public virtual string s_TAXDTLID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TAXDTLID) ? string.Empty : base.GetstringAsString(ColumnNames.TAXDTLID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TAXDTLID);
				else
					this.TAXDTLID = base.SetstringAsString(ColumnNames.TAXDTLID, value);
			}
		}

		public virtual string s_TXDTLDSC
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TXDTLDSC) ? string.Empty : base.GetstringAsString(ColumnNames.TXDTLDSC);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TXDTLDSC);
				else
					this.TXDTLDSC = base.SetstringAsString(ColumnNames.TXDTLDSC, value);
			}
		}

		public virtual string s_TXDTLTYP
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TXDTLTYP) ? string.Empty : base.GetshortAsString(ColumnNames.TXDTLTYP);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TXDTLTYP);
				else
					this.TXDTLTYP = base.SetshortAsString(ColumnNames.TXDTLTYP, value);
			}
		}

		public virtual string s_ACTINDX
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ACTINDX) ? string.Empty : base.GetintAsString(ColumnNames.ACTINDX);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ACTINDX);
				else
					this.ACTINDX = base.SetintAsString(ColumnNames.ACTINDX, value);
			}
		}

		public virtual string s_TXIDNMBR
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TXIDNMBR) ? string.Empty : base.GetstringAsString(ColumnNames.TXIDNMBR);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TXIDNMBR);
				else
					this.TXIDNMBR = base.SetstringAsString(ColumnNames.TXIDNMBR, value);
			}
		}

		public virtual string s_TXDTLBSE
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TXDTLBSE) ? string.Empty : base.GetshortAsString(ColumnNames.TXDTLBSE);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TXDTLBSE);
				else
					this.TXDTLBSE = base.SetshortAsString(ColumnNames.TXDTLBSE, value);
			}
		}

		public virtual string s_TXDTLPCT
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TXDTLPCT) ? string.Empty : base.GetdecimalAsString(ColumnNames.TXDTLPCT);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TXDTLPCT);
				else
					this.TXDTLPCT = base.SetdecimalAsString(ColumnNames.TXDTLPCT, value);
			}
		}

		public virtual string s_TXDTLAMT
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TXDTLAMT) ? string.Empty : base.GetdecimalAsString(ColumnNames.TXDTLAMT);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TXDTLAMT);
				else
					this.TXDTLAMT = base.SetdecimalAsString(ColumnNames.TXDTLAMT, value);
			}
		}

		public virtual string s_TDTLRNDG
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TDTLRNDG) ? string.Empty : base.GetshortAsString(ColumnNames.TDTLRNDG);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TDTLRNDG);
				else
					this.TDTLRNDG = base.SetshortAsString(ColumnNames.TDTLRNDG, value);
			}
		}

		public virtual string s_TXDBODTL
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TXDBODTL) ? string.Empty : base.GetstringAsString(ColumnNames.TXDBODTL);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TXDBODTL);
				else
					this.TXDBODTL = base.SetstringAsString(ColumnNames.TXDBODTL, value);
			}
		}

		public virtual string s_TDTABMIN
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TDTABMIN) ? string.Empty : base.GetdecimalAsString(ColumnNames.TDTABMIN);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TDTABMIN);
				else
					this.TDTABMIN = base.SetdecimalAsString(ColumnNames.TDTABMIN, value);
			}
		}

		public virtual string s_TDTABMAX
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TDTABMAX) ? string.Empty : base.GetdecimalAsString(ColumnNames.TDTABMAX);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TDTABMAX);
				else
					this.TDTABMAX = base.SetdecimalAsString(ColumnNames.TDTABMAX, value);
			}
		}

		public virtual string s_TDTAXMIN
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TDTAXMIN) ? string.Empty : base.GetdecimalAsString(ColumnNames.TDTAXMIN);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TDTAXMIN);
				else
					this.TDTAXMIN = base.SetdecimalAsString(ColumnNames.TDTAXMIN, value);
			}
		}

		public virtual string s_TDTAXMAX
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TDTAXMAX) ? string.Empty : base.GetdecimalAsString(ColumnNames.TDTAXMAX);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TDTAXMAX);
				else
					this.TDTAXMAX = base.SetdecimalAsString(ColumnNames.TDTAXMAX, value);
			}
		}

		public virtual string s_TDRNGTYP
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TDRNGTYP) ? string.Empty : base.GetshortAsString(ColumnNames.TDRNGTYP);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TDRNGTYP);
				else
					this.TDRNGTYP = base.SetshortAsString(ColumnNames.TDRNGTYP, value);
			}
		}

		public virtual string s_TXDTQUAL
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TXDTQUAL) ? string.Empty : base.GetshortAsString(ColumnNames.TXDTQUAL);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TXDTQUAL);
				else
					this.TXDTQUAL = base.SetshortAsString(ColumnNames.TXDTQUAL, value);
			}
		}

		public virtual string s_TDTAXTAX
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TDTAXTAX) ? string.Empty : base.GetbyteAsString(ColumnNames.TDTAXTAX);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TDTAXTAX);
				else
					this.TDTAXTAX = base.SetbyteAsString(ColumnNames.TDTAXTAX, value);
			}
		}

		public virtual string s_TXDTLPDC
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TXDTLPDC) ? string.Empty : base.GetbyteAsString(ColumnNames.TXDTLPDC);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TXDTLPDC);
				else
					this.TXDTLPDC = base.SetbyteAsString(ColumnNames.TXDTLPDC, value);
			}
		}

		public virtual string s_TXDTLPCH
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TXDTLPCH) ? string.Empty : base.GetstringAsString(ColumnNames.TXDTLPCH);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TXDTLPCH);
				else
					this.TXDTLPCH = base.SetstringAsString(ColumnNames.TXDTLPCH, value);
			}
		}

		public virtual string s_TXDXDISC
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TXDXDISC) ? string.Empty : base.GetbyteAsString(ColumnNames.TXDXDISC);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TXDXDISC);
				else
					this.TXDXDISC = base.SetbyteAsString(ColumnNames.TXDXDISC, value);
			}
		}

		public virtual string s_CMNYTXID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CMNYTXID) ? string.Empty : base.GetstringAsString(ColumnNames.CMNYTXID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CMNYTXID);
				else
					this.CMNYTXID = base.SetstringAsString(ColumnNames.CMNYTXID, value);
			}
		}

		public virtual string s_NOTEINDX
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NOTEINDX) ? string.Empty : base.GetdecimalAsString(ColumnNames.NOTEINDX);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NOTEINDX);
				else
					this.NOTEINDX = base.SetdecimalAsString(ColumnNames.NOTEINDX, value);
			}
		}

		public virtual string s_NAME
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.NAME) ? string.Empty : base.GetstringAsString(ColumnNames.NAME);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.NAME);
				else
					this.NAME = base.SetstringAsString(ColumnNames.NAME, value);
			}
		}

		public virtual string s_CNTCPRSN
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CNTCPRSN) ? string.Empty : base.GetstringAsString(ColumnNames.CNTCPRSN);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CNTCPRSN);
				else
					this.CNTCPRSN = base.SetstringAsString(ColumnNames.CNTCPRSN, value);
			}
		}

		public virtual string s_ADDRESS1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ADDRESS1) ? string.Empty : base.GetstringAsString(ColumnNames.ADDRESS1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ADDRESS1);
				else
					this.ADDRESS1 = base.SetstringAsString(ColumnNames.ADDRESS1, value);
			}
		}

		public virtual string s_ADDRESS2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ADDRESS2) ? string.Empty : base.GetstringAsString(ColumnNames.ADDRESS2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ADDRESS2);
				else
					this.ADDRESS2 = base.SetstringAsString(ColumnNames.ADDRESS2, value);
			}
		}

		public virtual string s_ADDRESS3
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ADDRESS3) ? string.Empty : base.GetstringAsString(ColumnNames.ADDRESS3);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ADDRESS3);
				else
					this.ADDRESS3 = base.SetstringAsString(ColumnNames.ADDRESS3, value);
			}
		}

		public virtual string s_CITY
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.CITY) ? string.Empty : base.GetstringAsString(ColumnNames.CITY);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.CITY);
				else
					this.CITY = base.SetstringAsString(ColumnNames.CITY, value);
			}
		}

		public virtual string s_STATE
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.STATE) ? string.Empty : base.GetstringAsString(ColumnNames.STATE);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.STATE);
				else
					this.STATE = base.SetstringAsString(ColumnNames.STATE, value);
			}
		}

		public virtual string s_ZIPCODE
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.ZIPCODE) ? string.Empty : base.GetstringAsString(ColumnNames.ZIPCODE);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.ZIPCODE);
				else
					this.ZIPCODE = base.SetstringAsString(ColumnNames.ZIPCODE, value);
			}
		}

		public virtual string s_COUNTRY
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.COUNTRY) ? string.Empty : base.GetstringAsString(ColumnNames.COUNTRY);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.COUNTRY);
				else
					this.COUNTRY = base.SetstringAsString(ColumnNames.COUNTRY, value);
			}
		}

		public virtual string s_PHONE1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PHONE1) ? string.Empty : base.GetstringAsString(ColumnNames.PHONE1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PHONE1);
				else
					this.PHONE1 = base.SetstringAsString(ColumnNames.PHONE1, value);
			}
		}

		public virtual string s_PHONE2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PHONE2) ? string.Empty : base.GetstringAsString(ColumnNames.PHONE2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PHONE2);
				else
					this.PHONE2 = base.SetstringAsString(ColumnNames.PHONE2, value);
			}
		}

		public virtual string s_PHONE3
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.PHONE3) ? string.Empty : base.GetstringAsString(ColumnNames.PHONE3);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.PHONE3);
				else
					this.PHONE3 = base.SetstringAsString(ColumnNames.PHONE3, value);
			}
		}

		public virtual string s_FAX
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.FAX) ? string.Empty : base.GetstringAsString(ColumnNames.FAX);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.FAX);
				else
					this.FAX = base.SetstringAsString(ColumnNames.FAX, value);
			}
		}

		public virtual string s_TXUSRDF1
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TXUSRDF1) ? string.Empty : base.GetstringAsString(ColumnNames.TXUSRDF1);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TXUSRDF1);
				else
					this.TXUSRDF1 = base.SetstringAsString(ColumnNames.TXUSRDF1, value);
			}
		}

		public virtual string s_TXUSRDF2
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TXUSRDF2) ? string.Empty : base.GetstringAsString(ColumnNames.TXUSRDF2);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TXUSRDF2);
				else
					this.TXUSRDF2 = base.SetstringAsString(ColumnNames.TXUSRDF2, value);
			}
		}

		public virtual string s_VATREGTX
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.VATREGTX) ? string.Empty : base.GetbyteAsString(ColumnNames.VATREGTX);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.VATREGTX);
				else
					this.VATREGTX = base.SetbyteAsString(ColumnNames.VATREGTX, value);
			}
		}

		public virtual string s_TaxInvReqd
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TaxInvReqd) ? string.Empty : base.GetbyteAsString(ColumnNames.TaxInvReqd);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TaxInvReqd);
				else
					this.TaxInvReqd = base.SetbyteAsString(ColumnNames.TaxInvReqd, value);
			}
		}

		public virtual string s_TaxPostToAcct
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TaxPostToAcct) ? string.Empty : base.GetshortAsString(ColumnNames.TaxPostToAcct);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TaxPostToAcct);
				else
					this.TaxPostToAcct = base.SetshortAsString(ColumnNames.TaxPostToAcct, value);
			}
		}

		public virtual string s_IGNRGRSSAMNT
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.IGNRGRSSAMNT) ? string.Empty : base.GetbyteAsString(ColumnNames.IGNRGRSSAMNT);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.IGNRGRSSAMNT);
				else
					this.IGNRGRSSAMNT = base.SetbyteAsString(ColumnNames.IGNRGRSSAMNT, value);
			}
		}

		public virtual string s_TDTABPCT
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.TDTABPCT) ? string.Empty : base.GetdecimalAsString(ColumnNames.TDTABPCT);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.TDTABPCT);
				else
					this.TDTABPCT = base.SetdecimalAsString(ColumnNames.TDTABPCT, value);
			}
		}

		public virtual string s_DEX_ROW_ID
	    {
			get
	        {
				return this.IsColumnNull(ColumnNames.DEX_ROW_ID) ? string.Empty : base.GetintAsString(ColumnNames.DEX_ROW_ID);
			}
			set
	        {
				if(string.Empty == value)
					this.SetColumnNull(ColumnNames.DEX_ROW_ID);
				else
					this.DEX_ROW_ID = base.SetintAsString(ColumnNames.DEX_ROW_ID, value);
			}
		}


		#endregion		
	
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region WhereParameter TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}
				
				
				public WhereParameter TAXDTLID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TAXDTLID, Parameters.TAXDTLID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TXDTLDSC
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TXDTLDSC, Parameters.TXDTLDSC);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TXDTLTYP
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TXDTLTYP, Parameters.TXDTLTYP);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ACTINDX
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ACTINDX, Parameters.ACTINDX);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TXIDNMBR
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TXIDNMBR, Parameters.TXIDNMBR);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TXDTLBSE
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TXDTLBSE, Parameters.TXDTLBSE);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TXDTLPCT
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TXDTLPCT, Parameters.TXDTLPCT);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TXDTLAMT
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TXDTLAMT, Parameters.TXDTLAMT);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TDTLRNDG
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TDTLRNDG, Parameters.TDTLRNDG);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TXDBODTL
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TXDBODTL, Parameters.TXDBODTL);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TDTABMIN
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TDTABMIN, Parameters.TDTABMIN);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TDTABMAX
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TDTABMAX, Parameters.TDTABMAX);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TDTAXMIN
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TDTAXMIN, Parameters.TDTAXMIN);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TDTAXMAX
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TDTAXMAX, Parameters.TDTAXMAX);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TDRNGTYP
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TDRNGTYP, Parameters.TDRNGTYP);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TXDTQUAL
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TXDTQUAL, Parameters.TXDTQUAL);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TDTAXTAX
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TDTAXTAX, Parameters.TDTAXTAX);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TXDTLPDC
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TXDTLPDC, Parameters.TXDTLPDC);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TXDTLPCH
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TXDTLPCH, Parameters.TXDTLPCH);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TXDXDISC
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TXDXDISC, Parameters.TXDXDISC);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CMNYTXID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CMNYTXID, Parameters.CMNYTXID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NOTEINDX
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NOTEINDX, Parameters.NOTEINDX);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter NAME
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.NAME, Parameters.NAME);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CNTCPRSN
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CNTCPRSN, Parameters.CNTCPRSN);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ADDRESS1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ADDRESS1, Parameters.ADDRESS1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ADDRESS2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ADDRESS2, Parameters.ADDRESS2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ADDRESS3
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ADDRESS3, Parameters.ADDRESS3);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter CITY
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.CITY, Parameters.CITY);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter STATE
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.STATE, Parameters.STATE);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter ZIPCODE
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.ZIPCODE, Parameters.ZIPCODE);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter COUNTRY
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.COUNTRY, Parameters.COUNTRY);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PHONE1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PHONE1, Parameters.PHONE1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PHONE2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PHONE2, Parameters.PHONE2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter PHONE3
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.PHONE3, Parameters.PHONE3);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter FAX
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.FAX, Parameters.FAX);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TXUSRDF1
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TXUSRDF1, Parameters.TXUSRDF1);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TXUSRDF2
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TXUSRDF2, Parameters.TXUSRDF2);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter VATREGTX
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.VATREGTX, Parameters.VATREGTX);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TaxInvReqd
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TaxInvReqd, Parameters.TaxInvReqd);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TaxPostToAcct
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TaxPostToAcct, Parameters.TaxPostToAcct);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TaxBoxes
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TaxBoxes, Parameters.TaxBoxes);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter IGNRGRSSAMNT
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.IGNRGRSSAMNT, Parameters.IGNRGRSSAMNT);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter TDTABPCT
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.TDTABPCT, Parameters.TDTABPCT);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}

				public WhereParameter DEX_ROW_ID
				{
					get
					{
							WhereParameter where = new WhereParameter(ColumnNames.DEX_ROW_ID, Parameters.DEX_ROW_ID);
							this._clause._entity.Query.AddWhereParameter(where);
							return where;
					}
				}


				private WhereClause _clause;
			}
			#endregion
		
			public WhereParameter TAXDTLID
		    {
				get
		        {
					if(_TAXDTLID_W == null)
	        	    {
						_TAXDTLID_W = TearOff.TAXDTLID;
					}
					return _TAXDTLID_W;
				}
			}

			public WhereParameter TXDTLDSC
		    {
				get
		        {
					if(_TXDTLDSC_W == null)
	        	    {
						_TXDTLDSC_W = TearOff.TXDTLDSC;
					}
					return _TXDTLDSC_W;
				}
			}

			public WhereParameter TXDTLTYP
		    {
				get
		        {
					if(_TXDTLTYP_W == null)
	        	    {
						_TXDTLTYP_W = TearOff.TXDTLTYP;
					}
					return _TXDTLTYP_W;
				}
			}

			public WhereParameter ACTINDX
		    {
				get
		        {
					if(_ACTINDX_W == null)
	        	    {
						_ACTINDX_W = TearOff.ACTINDX;
					}
					return _ACTINDX_W;
				}
			}

			public WhereParameter TXIDNMBR
		    {
				get
		        {
					if(_TXIDNMBR_W == null)
	        	    {
						_TXIDNMBR_W = TearOff.TXIDNMBR;
					}
					return _TXIDNMBR_W;
				}
			}

			public WhereParameter TXDTLBSE
		    {
				get
		        {
					if(_TXDTLBSE_W == null)
	        	    {
						_TXDTLBSE_W = TearOff.TXDTLBSE;
					}
					return _TXDTLBSE_W;
				}
			}

			public WhereParameter TXDTLPCT
		    {
				get
		        {
					if(_TXDTLPCT_W == null)
	        	    {
						_TXDTLPCT_W = TearOff.TXDTLPCT;
					}
					return _TXDTLPCT_W;
				}
			}

			public WhereParameter TXDTLAMT
		    {
				get
		        {
					if(_TXDTLAMT_W == null)
	        	    {
						_TXDTLAMT_W = TearOff.TXDTLAMT;
					}
					return _TXDTLAMT_W;
				}
			}

			public WhereParameter TDTLRNDG
		    {
				get
		        {
					if(_TDTLRNDG_W == null)
	        	    {
						_TDTLRNDG_W = TearOff.TDTLRNDG;
					}
					return _TDTLRNDG_W;
				}
			}

			public WhereParameter TXDBODTL
		    {
				get
		        {
					if(_TXDBODTL_W == null)
	        	    {
						_TXDBODTL_W = TearOff.TXDBODTL;
					}
					return _TXDBODTL_W;
				}
			}

			public WhereParameter TDTABMIN
		    {
				get
		        {
					if(_TDTABMIN_W == null)
	        	    {
						_TDTABMIN_W = TearOff.TDTABMIN;
					}
					return _TDTABMIN_W;
				}
			}

			public WhereParameter TDTABMAX
		    {
				get
		        {
					if(_TDTABMAX_W == null)
	        	    {
						_TDTABMAX_W = TearOff.TDTABMAX;
					}
					return _TDTABMAX_W;
				}
			}

			public WhereParameter TDTAXMIN
		    {
				get
		        {
					if(_TDTAXMIN_W == null)
	        	    {
						_TDTAXMIN_W = TearOff.TDTAXMIN;
					}
					return _TDTAXMIN_W;
				}
			}

			public WhereParameter TDTAXMAX
		    {
				get
		        {
					if(_TDTAXMAX_W == null)
	        	    {
						_TDTAXMAX_W = TearOff.TDTAXMAX;
					}
					return _TDTAXMAX_W;
				}
			}

			public WhereParameter TDRNGTYP
		    {
				get
		        {
					if(_TDRNGTYP_W == null)
	        	    {
						_TDRNGTYP_W = TearOff.TDRNGTYP;
					}
					return _TDRNGTYP_W;
				}
			}

			public WhereParameter TXDTQUAL
		    {
				get
		        {
					if(_TXDTQUAL_W == null)
	        	    {
						_TXDTQUAL_W = TearOff.TXDTQUAL;
					}
					return _TXDTQUAL_W;
				}
			}

			public WhereParameter TDTAXTAX
		    {
				get
		        {
					if(_TDTAXTAX_W == null)
	        	    {
						_TDTAXTAX_W = TearOff.TDTAXTAX;
					}
					return _TDTAXTAX_W;
				}
			}

			public WhereParameter TXDTLPDC
		    {
				get
		        {
					if(_TXDTLPDC_W == null)
	        	    {
						_TXDTLPDC_W = TearOff.TXDTLPDC;
					}
					return _TXDTLPDC_W;
				}
			}

			public WhereParameter TXDTLPCH
		    {
				get
		        {
					if(_TXDTLPCH_W == null)
	        	    {
						_TXDTLPCH_W = TearOff.TXDTLPCH;
					}
					return _TXDTLPCH_W;
				}
			}

			public WhereParameter TXDXDISC
		    {
				get
		        {
					if(_TXDXDISC_W == null)
	        	    {
						_TXDXDISC_W = TearOff.TXDXDISC;
					}
					return _TXDXDISC_W;
				}
			}

			public WhereParameter CMNYTXID
		    {
				get
		        {
					if(_CMNYTXID_W == null)
	        	    {
						_CMNYTXID_W = TearOff.CMNYTXID;
					}
					return _CMNYTXID_W;
				}
			}

			public WhereParameter NOTEINDX
		    {
				get
		        {
					if(_NOTEINDX_W == null)
	        	    {
						_NOTEINDX_W = TearOff.NOTEINDX;
					}
					return _NOTEINDX_W;
				}
			}

			public WhereParameter NAME
		    {
				get
		        {
					if(_NAME_W == null)
	        	    {
						_NAME_W = TearOff.NAME;
					}
					return _NAME_W;
				}
			}

			public WhereParameter CNTCPRSN
		    {
				get
		        {
					if(_CNTCPRSN_W == null)
	        	    {
						_CNTCPRSN_W = TearOff.CNTCPRSN;
					}
					return _CNTCPRSN_W;
				}
			}

			public WhereParameter ADDRESS1
		    {
				get
		        {
					if(_ADDRESS1_W == null)
	        	    {
						_ADDRESS1_W = TearOff.ADDRESS1;
					}
					return _ADDRESS1_W;
				}
			}

			public WhereParameter ADDRESS2
		    {
				get
		        {
					if(_ADDRESS2_W == null)
	        	    {
						_ADDRESS2_W = TearOff.ADDRESS2;
					}
					return _ADDRESS2_W;
				}
			}

			public WhereParameter ADDRESS3
		    {
				get
		        {
					if(_ADDRESS3_W == null)
	        	    {
						_ADDRESS3_W = TearOff.ADDRESS3;
					}
					return _ADDRESS3_W;
				}
			}

			public WhereParameter CITY
		    {
				get
		        {
					if(_CITY_W == null)
	        	    {
						_CITY_W = TearOff.CITY;
					}
					return _CITY_W;
				}
			}

			public WhereParameter STATE
		    {
				get
		        {
					if(_STATE_W == null)
	        	    {
						_STATE_W = TearOff.STATE;
					}
					return _STATE_W;
				}
			}

			public WhereParameter ZIPCODE
		    {
				get
		        {
					if(_ZIPCODE_W == null)
	        	    {
						_ZIPCODE_W = TearOff.ZIPCODE;
					}
					return _ZIPCODE_W;
				}
			}

			public WhereParameter COUNTRY
		    {
				get
		        {
					if(_COUNTRY_W == null)
	        	    {
						_COUNTRY_W = TearOff.COUNTRY;
					}
					return _COUNTRY_W;
				}
			}

			public WhereParameter PHONE1
		    {
				get
		        {
					if(_PHONE1_W == null)
	        	    {
						_PHONE1_W = TearOff.PHONE1;
					}
					return _PHONE1_W;
				}
			}

			public WhereParameter PHONE2
		    {
				get
		        {
					if(_PHONE2_W == null)
	        	    {
						_PHONE2_W = TearOff.PHONE2;
					}
					return _PHONE2_W;
				}
			}

			public WhereParameter PHONE3
		    {
				get
		        {
					if(_PHONE3_W == null)
	        	    {
						_PHONE3_W = TearOff.PHONE3;
					}
					return _PHONE3_W;
				}
			}

			public WhereParameter FAX
		    {
				get
		        {
					if(_FAX_W == null)
	        	    {
						_FAX_W = TearOff.FAX;
					}
					return _FAX_W;
				}
			}

			public WhereParameter TXUSRDF1
		    {
				get
		        {
					if(_TXUSRDF1_W == null)
	        	    {
						_TXUSRDF1_W = TearOff.TXUSRDF1;
					}
					return _TXUSRDF1_W;
				}
			}

			public WhereParameter TXUSRDF2
		    {
				get
		        {
					if(_TXUSRDF2_W == null)
	        	    {
						_TXUSRDF2_W = TearOff.TXUSRDF2;
					}
					return _TXUSRDF2_W;
				}
			}

			public WhereParameter VATREGTX
		    {
				get
		        {
					if(_VATREGTX_W == null)
	        	    {
						_VATREGTX_W = TearOff.VATREGTX;
					}
					return _VATREGTX_W;
				}
			}

			public WhereParameter TaxInvReqd
		    {
				get
		        {
					if(_TaxInvReqd_W == null)
	        	    {
						_TaxInvReqd_W = TearOff.TaxInvReqd;
					}
					return _TaxInvReqd_W;
				}
			}

			public WhereParameter TaxPostToAcct
		    {
				get
		        {
					if(_TaxPostToAcct_W == null)
	        	    {
						_TaxPostToAcct_W = TearOff.TaxPostToAcct;
					}
					return _TaxPostToAcct_W;
				}
			}

			public WhereParameter TaxBoxes
		    {
				get
		        {
					if(_TaxBoxes_W == null)
	        	    {
						_TaxBoxes_W = TearOff.TaxBoxes;
					}
					return _TaxBoxes_W;
				}
			}

			public WhereParameter IGNRGRSSAMNT
		    {
				get
		        {
					if(_IGNRGRSSAMNT_W == null)
	        	    {
						_IGNRGRSSAMNT_W = TearOff.IGNRGRSSAMNT;
					}
					return _IGNRGRSSAMNT_W;
				}
			}

			public WhereParameter TDTABPCT
		    {
				get
		        {
					if(_TDTABPCT_W == null)
	        	    {
						_TDTABPCT_W = TearOff.TDTABPCT;
					}
					return _TDTABPCT_W;
				}
			}

			public WhereParameter DEX_ROW_ID
		    {
				get
		        {
					if(_DEX_ROW_ID_W == null)
	        	    {
						_DEX_ROW_ID_W = TearOff.DEX_ROW_ID;
					}
					return _DEX_ROW_ID_W;
				}
			}

			private WhereParameter _TAXDTLID_W = null;
			private WhereParameter _TXDTLDSC_W = null;
			private WhereParameter _TXDTLTYP_W = null;
			private WhereParameter _ACTINDX_W = null;
			private WhereParameter _TXIDNMBR_W = null;
			private WhereParameter _TXDTLBSE_W = null;
			private WhereParameter _TXDTLPCT_W = null;
			private WhereParameter _TXDTLAMT_W = null;
			private WhereParameter _TDTLRNDG_W = null;
			private WhereParameter _TXDBODTL_W = null;
			private WhereParameter _TDTABMIN_W = null;
			private WhereParameter _TDTABMAX_W = null;
			private WhereParameter _TDTAXMIN_W = null;
			private WhereParameter _TDTAXMAX_W = null;
			private WhereParameter _TDRNGTYP_W = null;
			private WhereParameter _TXDTQUAL_W = null;
			private WhereParameter _TDTAXTAX_W = null;
			private WhereParameter _TXDTLPDC_W = null;
			private WhereParameter _TXDTLPCH_W = null;
			private WhereParameter _TXDXDISC_W = null;
			private WhereParameter _CMNYTXID_W = null;
			private WhereParameter _NOTEINDX_W = null;
			private WhereParameter _NAME_W = null;
			private WhereParameter _CNTCPRSN_W = null;
			private WhereParameter _ADDRESS1_W = null;
			private WhereParameter _ADDRESS2_W = null;
			private WhereParameter _ADDRESS3_W = null;
			private WhereParameter _CITY_W = null;
			private WhereParameter _STATE_W = null;
			private WhereParameter _ZIPCODE_W = null;
			private WhereParameter _COUNTRY_W = null;
			private WhereParameter _PHONE1_W = null;
			private WhereParameter _PHONE2_W = null;
			private WhereParameter _PHONE3_W = null;
			private WhereParameter _FAX_W = null;
			private WhereParameter _TXUSRDF1_W = null;
			private WhereParameter _TXUSRDF2_W = null;
			private WhereParameter _VATREGTX_W = null;
			private WhereParameter _TaxInvReqd_W = null;
			private WhereParameter _TaxPostToAcct_W = null;
			private WhereParameter _TaxBoxes_W = null;
			private WhereParameter _IGNRGRSSAMNT_W = null;
			private WhereParameter _TDTABPCT_W = null;
			private WhereParameter _DEX_ROW_ID_W = null;

			public void WhereClauseReset()
			{
				_TAXDTLID_W = null;
				_TXDTLDSC_W = null;
				_TXDTLTYP_W = null;
				_ACTINDX_W = null;
				_TXIDNMBR_W = null;
				_TXDTLBSE_W = null;
				_TXDTLPCT_W = null;
				_TXDTLAMT_W = null;
				_TDTLRNDG_W = null;
				_TXDBODTL_W = null;
				_TDTABMIN_W = null;
				_TDTABMAX_W = null;
				_TDTAXMIN_W = null;
				_TDTAXMAX_W = null;
				_TDRNGTYP_W = null;
				_TXDTQUAL_W = null;
				_TDTAXTAX_W = null;
				_TXDTLPDC_W = null;
				_TXDTLPCH_W = null;
				_TXDXDISC_W = null;
				_CMNYTXID_W = null;
				_NOTEINDX_W = null;
				_NAME_W = null;
				_CNTCPRSN_W = null;
				_ADDRESS1_W = null;
				_ADDRESS2_W = null;
				_ADDRESS3_W = null;
				_CITY_W = null;
				_STATE_W = null;
				_ZIPCODE_W = null;
				_COUNTRY_W = null;
				_PHONE1_W = null;
				_PHONE2_W = null;
				_PHONE3_W = null;
				_FAX_W = null;
				_TXUSRDF1_W = null;
				_TXUSRDF2_W = null;
				_VATREGTX_W = null;
				_TaxInvReqd_W = null;
				_TaxPostToAcct_W = null;
				_TaxBoxes_W = null;
				_IGNRGRSSAMNT_W = null;
				_TDTABPCT_W = null;
				_DEX_ROW_ID_W = null;

				this._entity.Query.FlushWhereParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffWhereParameter _tearOff;
			
		}
	
		public WhereClause Where
		{
			get
			{
				if(_whereClause == null)
				{
					_whereClause = new WhereClause(this);
				}
		
				return _whereClause;
			}
		}
		
		private WhereClause _whereClause = null;	
		#endregion
	
		#region Aggregate Clause
		public class AggregateClause
		{
			public AggregateClause(BusinessEntity entity)
			{
				this._entity = entity;
			}
			
			public TearOffAggregateParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffAggregateParameter(this);
					}

					return _tearOff;
				}
			}

			#region AggregateParameter TearOff's
			public class TearOffAggregateParameter
			{
				public TearOffAggregateParameter(AggregateClause clause)
				{
					this._clause = clause;
				}
				
				
				public AggregateParameter TAXDTLID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TAXDTLID, Parameters.TAXDTLID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TXDTLDSC
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TXDTLDSC, Parameters.TXDTLDSC);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TXDTLTYP
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TXDTLTYP, Parameters.TXDTLTYP);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ACTINDX
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ACTINDX, Parameters.ACTINDX);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TXIDNMBR
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TXIDNMBR, Parameters.TXIDNMBR);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TXDTLBSE
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TXDTLBSE, Parameters.TXDTLBSE);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TXDTLPCT
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TXDTLPCT, Parameters.TXDTLPCT);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TXDTLAMT
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TXDTLAMT, Parameters.TXDTLAMT);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TDTLRNDG
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TDTLRNDG, Parameters.TDTLRNDG);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TXDBODTL
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TXDBODTL, Parameters.TXDBODTL);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TDTABMIN
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TDTABMIN, Parameters.TDTABMIN);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TDTABMAX
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TDTABMAX, Parameters.TDTABMAX);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TDTAXMIN
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TDTAXMIN, Parameters.TDTAXMIN);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TDTAXMAX
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TDTAXMAX, Parameters.TDTAXMAX);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TDRNGTYP
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TDRNGTYP, Parameters.TDRNGTYP);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TXDTQUAL
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TXDTQUAL, Parameters.TXDTQUAL);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TDTAXTAX
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TDTAXTAX, Parameters.TDTAXTAX);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TXDTLPDC
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TXDTLPDC, Parameters.TXDTLPDC);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TXDTLPCH
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TXDTLPCH, Parameters.TXDTLPCH);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TXDXDISC
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TXDXDISC, Parameters.TXDXDISC);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CMNYTXID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CMNYTXID, Parameters.CMNYTXID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NOTEINDX
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NOTEINDX, Parameters.NOTEINDX);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter NAME
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.NAME, Parameters.NAME);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CNTCPRSN
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CNTCPRSN, Parameters.CNTCPRSN);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ADDRESS1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ADDRESS1, Parameters.ADDRESS1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ADDRESS2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ADDRESS2, Parameters.ADDRESS2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ADDRESS3
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ADDRESS3, Parameters.ADDRESS3);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter CITY
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.CITY, Parameters.CITY);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter STATE
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.STATE, Parameters.STATE);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter ZIPCODE
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.ZIPCODE, Parameters.ZIPCODE);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter COUNTRY
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.COUNTRY, Parameters.COUNTRY);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PHONE1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PHONE1, Parameters.PHONE1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PHONE2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PHONE2, Parameters.PHONE2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter PHONE3
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.PHONE3, Parameters.PHONE3);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter FAX
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.FAX, Parameters.FAX);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TXUSRDF1
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TXUSRDF1, Parameters.TXUSRDF1);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TXUSRDF2
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TXUSRDF2, Parameters.TXUSRDF2);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter VATREGTX
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.VATREGTX, Parameters.VATREGTX);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TaxInvReqd
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TaxInvReqd, Parameters.TaxInvReqd);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TaxPostToAcct
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TaxPostToAcct, Parameters.TaxPostToAcct);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TaxBoxes
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TaxBoxes, Parameters.TaxBoxes);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter IGNRGRSSAMNT
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.IGNRGRSSAMNT, Parameters.IGNRGRSSAMNT);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter TDTABPCT
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.TDTABPCT, Parameters.TDTABPCT);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}

				public AggregateParameter DEX_ROW_ID
				{
					get
					{
							AggregateParameter aggregate = new AggregateParameter(ColumnNames.DEX_ROW_ID, Parameters.DEX_ROW_ID);
							this._clause._entity.Query.AddAggregateParameter(aggregate);
							return aggregate;
					}
				}


				private AggregateClause _clause;
			}
			#endregion
		
			public AggregateParameter TAXDTLID
		    {
				get
		        {
					if(_TAXDTLID_W == null)
	        	    {
						_TAXDTLID_W = TearOff.TAXDTLID;
					}
					return _TAXDTLID_W;
				}
			}

			public AggregateParameter TXDTLDSC
		    {
				get
		        {
					if(_TXDTLDSC_W == null)
	        	    {
						_TXDTLDSC_W = TearOff.TXDTLDSC;
					}
					return _TXDTLDSC_W;
				}
			}

			public AggregateParameter TXDTLTYP
		    {
				get
		        {
					if(_TXDTLTYP_W == null)
	        	    {
						_TXDTLTYP_W = TearOff.TXDTLTYP;
					}
					return _TXDTLTYP_W;
				}
			}

			public AggregateParameter ACTINDX
		    {
				get
		        {
					if(_ACTINDX_W == null)
	        	    {
						_ACTINDX_W = TearOff.ACTINDX;
					}
					return _ACTINDX_W;
				}
			}

			public AggregateParameter TXIDNMBR
		    {
				get
		        {
					if(_TXIDNMBR_W == null)
	        	    {
						_TXIDNMBR_W = TearOff.TXIDNMBR;
					}
					return _TXIDNMBR_W;
				}
			}

			public AggregateParameter TXDTLBSE
		    {
				get
		        {
					if(_TXDTLBSE_W == null)
	        	    {
						_TXDTLBSE_W = TearOff.TXDTLBSE;
					}
					return _TXDTLBSE_W;
				}
			}

			public AggregateParameter TXDTLPCT
		    {
				get
		        {
					if(_TXDTLPCT_W == null)
	        	    {
						_TXDTLPCT_W = TearOff.TXDTLPCT;
					}
					return _TXDTLPCT_W;
				}
			}

			public AggregateParameter TXDTLAMT
		    {
				get
		        {
					if(_TXDTLAMT_W == null)
	        	    {
						_TXDTLAMT_W = TearOff.TXDTLAMT;
					}
					return _TXDTLAMT_W;
				}
			}

			public AggregateParameter TDTLRNDG
		    {
				get
		        {
					if(_TDTLRNDG_W == null)
	        	    {
						_TDTLRNDG_W = TearOff.TDTLRNDG;
					}
					return _TDTLRNDG_W;
				}
			}

			public AggregateParameter TXDBODTL
		    {
				get
		        {
					if(_TXDBODTL_W == null)
	        	    {
						_TXDBODTL_W = TearOff.TXDBODTL;
					}
					return _TXDBODTL_W;
				}
			}

			public AggregateParameter TDTABMIN
		    {
				get
		        {
					if(_TDTABMIN_W == null)
	        	    {
						_TDTABMIN_W = TearOff.TDTABMIN;
					}
					return _TDTABMIN_W;
				}
			}

			public AggregateParameter TDTABMAX
		    {
				get
		        {
					if(_TDTABMAX_W == null)
	        	    {
						_TDTABMAX_W = TearOff.TDTABMAX;
					}
					return _TDTABMAX_W;
				}
			}

			public AggregateParameter TDTAXMIN
		    {
				get
		        {
					if(_TDTAXMIN_W == null)
	        	    {
						_TDTAXMIN_W = TearOff.TDTAXMIN;
					}
					return _TDTAXMIN_W;
				}
			}

			public AggregateParameter TDTAXMAX
		    {
				get
		        {
					if(_TDTAXMAX_W == null)
	        	    {
						_TDTAXMAX_W = TearOff.TDTAXMAX;
					}
					return _TDTAXMAX_W;
				}
			}

			public AggregateParameter TDRNGTYP
		    {
				get
		        {
					if(_TDRNGTYP_W == null)
	        	    {
						_TDRNGTYP_W = TearOff.TDRNGTYP;
					}
					return _TDRNGTYP_W;
				}
			}

			public AggregateParameter TXDTQUAL
		    {
				get
		        {
					if(_TXDTQUAL_W == null)
	        	    {
						_TXDTQUAL_W = TearOff.TXDTQUAL;
					}
					return _TXDTQUAL_W;
				}
			}

			public AggregateParameter TDTAXTAX
		    {
				get
		        {
					if(_TDTAXTAX_W == null)
	        	    {
						_TDTAXTAX_W = TearOff.TDTAXTAX;
					}
					return _TDTAXTAX_W;
				}
			}

			public AggregateParameter TXDTLPDC
		    {
				get
		        {
					if(_TXDTLPDC_W == null)
	        	    {
						_TXDTLPDC_W = TearOff.TXDTLPDC;
					}
					return _TXDTLPDC_W;
				}
			}

			public AggregateParameter TXDTLPCH
		    {
				get
		        {
					if(_TXDTLPCH_W == null)
	        	    {
						_TXDTLPCH_W = TearOff.TXDTLPCH;
					}
					return _TXDTLPCH_W;
				}
			}

			public AggregateParameter TXDXDISC
		    {
				get
		        {
					if(_TXDXDISC_W == null)
	        	    {
						_TXDXDISC_W = TearOff.TXDXDISC;
					}
					return _TXDXDISC_W;
				}
			}

			public AggregateParameter CMNYTXID
		    {
				get
		        {
					if(_CMNYTXID_W == null)
	        	    {
						_CMNYTXID_W = TearOff.CMNYTXID;
					}
					return _CMNYTXID_W;
				}
			}

			public AggregateParameter NOTEINDX
		    {
				get
		        {
					if(_NOTEINDX_W == null)
	        	    {
						_NOTEINDX_W = TearOff.NOTEINDX;
					}
					return _NOTEINDX_W;
				}
			}

			public AggregateParameter NAME
		    {
				get
		        {
					if(_NAME_W == null)
	        	    {
						_NAME_W = TearOff.NAME;
					}
					return _NAME_W;
				}
			}

			public AggregateParameter CNTCPRSN
		    {
				get
		        {
					if(_CNTCPRSN_W == null)
	        	    {
						_CNTCPRSN_W = TearOff.CNTCPRSN;
					}
					return _CNTCPRSN_W;
				}
			}

			public AggregateParameter ADDRESS1
		    {
				get
		        {
					if(_ADDRESS1_W == null)
	        	    {
						_ADDRESS1_W = TearOff.ADDRESS1;
					}
					return _ADDRESS1_W;
				}
			}

			public AggregateParameter ADDRESS2
		    {
				get
		        {
					if(_ADDRESS2_W == null)
	        	    {
						_ADDRESS2_W = TearOff.ADDRESS2;
					}
					return _ADDRESS2_W;
				}
			}

			public AggregateParameter ADDRESS3
		    {
				get
		        {
					if(_ADDRESS3_W == null)
	        	    {
						_ADDRESS3_W = TearOff.ADDRESS3;
					}
					return _ADDRESS3_W;
				}
			}

			public AggregateParameter CITY
		    {
				get
		        {
					if(_CITY_W == null)
	        	    {
						_CITY_W = TearOff.CITY;
					}
					return _CITY_W;
				}
			}

			public AggregateParameter STATE
		    {
				get
		        {
					if(_STATE_W == null)
	        	    {
						_STATE_W = TearOff.STATE;
					}
					return _STATE_W;
				}
			}

			public AggregateParameter ZIPCODE
		    {
				get
		        {
					if(_ZIPCODE_W == null)
	        	    {
						_ZIPCODE_W = TearOff.ZIPCODE;
					}
					return _ZIPCODE_W;
				}
			}

			public AggregateParameter COUNTRY
		    {
				get
		        {
					if(_COUNTRY_W == null)
	        	    {
						_COUNTRY_W = TearOff.COUNTRY;
					}
					return _COUNTRY_W;
				}
			}

			public AggregateParameter PHONE1
		    {
				get
		        {
					if(_PHONE1_W == null)
	        	    {
						_PHONE1_W = TearOff.PHONE1;
					}
					return _PHONE1_W;
				}
			}

			public AggregateParameter PHONE2
		    {
				get
		        {
					if(_PHONE2_W == null)
	        	    {
						_PHONE2_W = TearOff.PHONE2;
					}
					return _PHONE2_W;
				}
			}

			public AggregateParameter PHONE3
		    {
				get
		        {
					if(_PHONE3_W == null)
	        	    {
						_PHONE3_W = TearOff.PHONE3;
					}
					return _PHONE3_W;
				}
			}

			public AggregateParameter FAX
		    {
				get
		        {
					if(_FAX_W == null)
	        	    {
						_FAX_W = TearOff.FAX;
					}
					return _FAX_W;
				}
			}

			public AggregateParameter TXUSRDF1
		    {
				get
		        {
					if(_TXUSRDF1_W == null)
	        	    {
						_TXUSRDF1_W = TearOff.TXUSRDF1;
					}
					return _TXUSRDF1_W;
				}
			}

			public AggregateParameter TXUSRDF2
		    {
				get
		        {
					if(_TXUSRDF2_W == null)
	        	    {
						_TXUSRDF2_W = TearOff.TXUSRDF2;
					}
					return _TXUSRDF2_W;
				}
			}

			public AggregateParameter VATREGTX
		    {
				get
		        {
					if(_VATREGTX_W == null)
	        	    {
						_VATREGTX_W = TearOff.VATREGTX;
					}
					return _VATREGTX_W;
				}
			}

			public AggregateParameter TaxInvReqd
		    {
				get
		        {
					if(_TaxInvReqd_W == null)
	        	    {
						_TaxInvReqd_W = TearOff.TaxInvReqd;
					}
					return _TaxInvReqd_W;
				}
			}

			public AggregateParameter TaxPostToAcct
		    {
				get
		        {
					if(_TaxPostToAcct_W == null)
	        	    {
						_TaxPostToAcct_W = TearOff.TaxPostToAcct;
					}
					return _TaxPostToAcct_W;
				}
			}

			public AggregateParameter TaxBoxes
		    {
				get
		        {
					if(_TaxBoxes_W == null)
	        	    {
						_TaxBoxes_W = TearOff.TaxBoxes;
					}
					return _TaxBoxes_W;
				}
			}

			public AggregateParameter IGNRGRSSAMNT
		    {
				get
		        {
					if(_IGNRGRSSAMNT_W == null)
	        	    {
						_IGNRGRSSAMNT_W = TearOff.IGNRGRSSAMNT;
					}
					return _IGNRGRSSAMNT_W;
				}
			}

			public AggregateParameter TDTABPCT
		    {
				get
		        {
					if(_TDTABPCT_W == null)
	        	    {
						_TDTABPCT_W = TearOff.TDTABPCT;
					}
					return _TDTABPCT_W;
				}
			}

			public AggregateParameter DEX_ROW_ID
		    {
				get
		        {
					if(_DEX_ROW_ID_W == null)
	        	    {
						_DEX_ROW_ID_W = TearOff.DEX_ROW_ID;
					}
					return _DEX_ROW_ID_W;
				}
			}

			private AggregateParameter _TAXDTLID_W = null;
			private AggregateParameter _TXDTLDSC_W = null;
			private AggregateParameter _TXDTLTYP_W = null;
			private AggregateParameter _ACTINDX_W = null;
			private AggregateParameter _TXIDNMBR_W = null;
			private AggregateParameter _TXDTLBSE_W = null;
			private AggregateParameter _TXDTLPCT_W = null;
			private AggregateParameter _TXDTLAMT_W = null;
			private AggregateParameter _TDTLRNDG_W = null;
			private AggregateParameter _TXDBODTL_W = null;
			private AggregateParameter _TDTABMIN_W = null;
			private AggregateParameter _TDTABMAX_W = null;
			private AggregateParameter _TDTAXMIN_W = null;
			private AggregateParameter _TDTAXMAX_W = null;
			private AggregateParameter _TDRNGTYP_W = null;
			private AggregateParameter _TXDTQUAL_W = null;
			private AggregateParameter _TDTAXTAX_W = null;
			private AggregateParameter _TXDTLPDC_W = null;
			private AggregateParameter _TXDTLPCH_W = null;
			private AggregateParameter _TXDXDISC_W = null;
			private AggregateParameter _CMNYTXID_W = null;
			private AggregateParameter _NOTEINDX_W = null;
			private AggregateParameter _NAME_W = null;
			private AggregateParameter _CNTCPRSN_W = null;
			private AggregateParameter _ADDRESS1_W = null;
			private AggregateParameter _ADDRESS2_W = null;
			private AggregateParameter _ADDRESS3_W = null;
			private AggregateParameter _CITY_W = null;
			private AggregateParameter _STATE_W = null;
			private AggregateParameter _ZIPCODE_W = null;
			private AggregateParameter _COUNTRY_W = null;
			private AggregateParameter _PHONE1_W = null;
			private AggregateParameter _PHONE2_W = null;
			private AggregateParameter _PHONE3_W = null;
			private AggregateParameter _FAX_W = null;
			private AggregateParameter _TXUSRDF1_W = null;
			private AggregateParameter _TXUSRDF2_W = null;
			private AggregateParameter _VATREGTX_W = null;
			private AggregateParameter _TaxInvReqd_W = null;
			private AggregateParameter _TaxPostToAcct_W = null;
			private AggregateParameter _TaxBoxes_W = null;
			private AggregateParameter _IGNRGRSSAMNT_W = null;
			private AggregateParameter _TDTABPCT_W = null;
			private AggregateParameter _DEX_ROW_ID_W = null;

			public void AggregateClauseReset()
			{
				_TAXDTLID_W = null;
				_TXDTLDSC_W = null;
				_TXDTLTYP_W = null;
				_ACTINDX_W = null;
				_TXIDNMBR_W = null;
				_TXDTLBSE_W = null;
				_TXDTLPCT_W = null;
				_TXDTLAMT_W = null;
				_TDTLRNDG_W = null;
				_TXDBODTL_W = null;
				_TDTABMIN_W = null;
				_TDTABMAX_W = null;
				_TDTAXMIN_W = null;
				_TDTAXMAX_W = null;
				_TDRNGTYP_W = null;
				_TXDTQUAL_W = null;
				_TDTAXTAX_W = null;
				_TXDTLPDC_W = null;
				_TXDTLPCH_W = null;
				_TXDXDISC_W = null;
				_CMNYTXID_W = null;
				_NOTEINDX_W = null;
				_NAME_W = null;
				_CNTCPRSN_W = null;
				_ADDRESS1_W = null;
				_ADDRESS2_W = null;
				_ADDRESS3_W = null;
				_CITY_W = null;
				_STATE_W = null;
				_ZIPCODE_W = null;
				_COUNTRY_W = null;
				_PHONE1_W = null;
				_PHONE2_W = null;
				_PHONE3_W = null;
				_FAX_W = null;
				_TXUSRDF1_W = null;
				_TXUSRDF2_W = null;
				_VATREGTX_W = null;
				_TaxInvReqd_W = null;
				_TaxPostToAcct_W = null;
				_TaxBoxes_W = null;
				_IGNRGRSSAMNT_W = null;
				_TDTABPCT_W = null;
				_DEX_ROW_ID_W = null;

				this._entity.Query.FlushAggregateParameters();

			}
	
			private BusinessEntity _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
		public AggregateClause Aggregate
		{
			get
			{
				if(_aggregateClause == null)
				{
					_aggregateClause = new AggregateClause(this);
				}
		
				return _aggregateClause;
			}
		}
		
		private AggregateClause _aggregateClause = null;	
		#endregion
	
		protected override IDbCommand GetInsertCommand() 
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TX00201Insert]";
	
			CreateParameters(cmd);
			
			SqlParameter p;
			p = cmd.Parameters[Parameters.DEX_ROW_ID.ParameterName];
			p.Direction = ParameterDirection.Output;
    
			return cmd;
		}
	
		protected override IDbCommand GetUpdateCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TX00201Update]";
	
			CreateParameters(cmd);
			      
			return cmd;
		}
	
		protected override IDbCommand GetDeleteCommand()
		{
		
			SqlCommand cmd = new SqlCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = "[" + this.SchemaStoredProcedure + "proc_TX00201Delete]";
	
			SqlParameter p;
			p = cmd.Parameters.Add(Parameters.TAXDTLID);
			p.SourceColumn = ColumnNames.TAXDTLID;
			p.SourceVersion = DataRowVersion.Current;

  
			return cmd;
		}
		
		private IDbCommand CreateParameters(SqlCommand cmd)
		{
			SqlParameter p;
		
			p = cmd.Parameters.Add(Parameters.TAXDTLID);
			p.SourceColumn = ColumnNames.TAXDTLID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TXDTLDSC);
			p.SourceColumn = ColumnNames.TXDTLDSC;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TXDTLTYP);
			p.SourceColumn = ColumnNames.TXDTLTYP;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ACTINDX);
			p.SourceColumn = ColumnNames.ACTINDX;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TXIDNMBR);
			p.SourceColumn = ColumnNames.TXIDNMBR;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TXDTLBSE);
			p.SourceColumn = ColumnNames.TXDTLBSE;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TXDTLPCT);
			p.SourceColumn = ColumnNames.TXDTLPCT;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TXDTLAMT);
			p.SourceColumn = ColumnNames.TXDTLAMT;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TDTLRNDG);
			p.SourceColumn = ColumnNames.TDTLRNDG;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TXDBODTL);
			p.SourceColumn = ColumnNames.TXDBODTL;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TDTABMIN);
			p.SourceColumn = ColumnNames.TDTABMIN;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TDTABMAX);
			p.SourceColumn = ColumnNames.TDTABMAX;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TDTAXMIN);
			p.SourceColumn = ColumnNames.TDTAXMIN;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TDTAXMAX);
			p.SourceColumn = ColumnNames.TDTAXMAX;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TDRNGTYP);
			p.SourceColumn = ColumnNames.TDRNGTYP;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TXDTQUAL);
			p.SourceColumn = ColumnNames.TXDTQUAL;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TDTAXTAX);
			p.SourceColumn = ColumnNames.TDTAXTAX;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TXDTLPDC);
			p.SourceColumn = ColumnNames.TXDTLPDC;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TXDTLPCH);
			p.SourceColumn = ColumnNames.TXDTLPCH;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TXDXDISC);
			p.SourceColumn = ColumnNames.TXDXDISC;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CMNYTXID);
			p.SourceColumn = ColumnNames.CMNYTXID;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NOTEINDX);
			p.SourceColumn = ColumnNames.NOTEINDX;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.NAME);
			p.SourceColumn = ColumnNames.NAME;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CNTCPRSN);
			p.SourceColumn = ColumnNames.CNTCPRSN;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ADDRESS1);
			p.SourceColumn = ColumnNames.ADDRESS1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ADDRESS2);
			p.SourceColumn = ColumnNames.ADDRESS2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ADDRESS3);
			p.SourceColumn = ColumnNames.ADDRESS3;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.CITY);
			p.SourceColumn = ColumnNames.CITY;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.STATE);
			p.SourceColumn = ColumnNames.STATE;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.ZIPCODE);
			p.SourceColumn = ColumnNames.ZIPCODE;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.COUNTRY);
			p.SourceColumn = ColumnNames.COUNTRY;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PHONE1);
			p.SourceColumn = ColumnNames.PHONE1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PHONE2);
			p.SourceColumn = ColumnNames.PHONE2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.PHONE3);
			p.SourceColumn = ColumnNames.PHONE3;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.FAX);
			p.SourceColumn = ColumnNames.FAX;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TXUSRDF1);
			p.SourceColumn = ColumnNames.TXUSRDF1;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TXUSRDF2);
			p.SourceColumn = ColumnNames.TXUSRDF2;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.VATREGTX);
			p.SourceColumn = ColumnNames.VATREGTX;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TaxInvReqd);
			p.SourceColumn = ColumnNames.TaxInvReqd;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TaxPostToAcct);
			p.SourceColumn = ColumnNames.TaxPostToAcct;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TaxBoxes);
			p.SourceColumn = ColumnNames.TaxBoxes;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.IGNRGRSSAMNT);
			p.SourceColumn = ColumnNames.IGNRGRSSAMNT;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.TDTABPCT);
			p.SourceColumn = ColumnNames.TDTABPCT;
			p.SourceVersion = DataRowVersion.Current;

			p = cmd.Parameters.Add(Parameters.DEX_ROW_ID);
			p.SourceColumn = ColumnNames.DEX_ROW_ID;
			p.SourceVersion = DataRowVersion.Current;


			return cmd;
		}
	}
}
